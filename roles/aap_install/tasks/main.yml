---
- name: Gather package facts
  package_facts:

- name: Set Ansible Automation Platform repository
  set_fact:
    installer_repo: >-
      ansible-automation-platform-{{ aap_install_version -}}
      -for-rhel-{{ ansible_facts.distribution_major_version -}}
      -{{ ansible_facts.architecture }}-rpms

- name: Install Ansible Automation Platform installer
  become: true
  yum:
    name: ansible-automation-platform-installer
    enablerepo: "{{ installer_repo }}"
    state: "{{ 'latest' if aap_install_upgrade | bool else 'present' }}"
  register: installer_package
  when: "'ansible-automation-platform-installer' not in ansible_facts.packages"

- name: Check automation controller status
  uri:
    url: https://{{ aap_install_controller_fqdn }}
    method: GET
    validate_certs: false
  register: controller_info
  failed_when: false
  when: not aap_install_installer_run_always | bool

- name: Check automation hub status
  uri:
    url: https://{{ aap_install_hub_fqdn }}
    method: GET
    validate_certs: false
  register: hub_info
  failed_when: false
  when:
    - aap_install_hub_fqdn | default(false)
    - not aap_install_installer_run_always | bool

- name: Check EDA controller status
  uri:
    url: https://{{ aap_install_eda_controller_fqdn }}
    method: GET
    validate_certs: false
  register: eda_controller_info
  failed_when: false
  when:
    - aap_install_eda_controller_fqdn | default(false)
    - not aap_install_installer_run_always | bool

- name: Get available package versions
  vars:
    needed_versions:
      - ansible-core
      - ansible-automation-platform-installer
      - automation-controller
      - automation-hub
      - automation-eda-controller
  command: dnf --enablerepo={{ installer_repo }} list {{ needed_versions | join(' ') }}
  register: package_list
  changed_when: false

- name: Set installation package versions
  set_fact:
    ansible_rpm: "{{ ((package_list.stdout | regex_search('ansible-core\\..*') | split)[1] | split('.'))[0:2] | join('.') }}"
    platform_rpm: "{{ ((package_list.stdout | regex_search('ansible-automation-platform-installer\\..*') | split)[1] | split('-'))[0] }}"
    controller_rpm: "{{ ((package_list.stdout | regex_search('automation-controller\\..*') | split)[1] | split('-'))[0] }}"
    hub_rpm: "{{ ((package_list.stdout | regex_search('automation-hub\\..*') | split)[1] | split('-'))[0] }}"
    eda_controller_rpm: "{{ ((package_list.stdout | regex_search('automation-eda-controller\\..*') | split)[1] | split('-'))[0] }}"

- name: Copy inventory file
  copy:
    src: "{{ aap_install_inventory_custom_file }}"
    dest: "{{ aap_install_inventory_path }}"
    mode: '0600'
  when: aap_install_inventory_custom_file

- name: Create demo inventory
  template:
    src: demo.j2
    dest: "{{ aap_install_inventory_path }}"
    mode: '0600'
  when:
    - not aap_install_inventory_custom_file
    - aap_install_demo_setup | bool

- name: Create custom inventory
  template:
    src: inventory.j2
    dest: "{{ aap_install_inventory_path }}"
    mode: '0600'
  when:
    - not aap_install_inventory_custom_file
    - not aap_install_demo_setup | bool

- name: Install Ansible Automation Platform
  # Needed for now due to AAP-14991
  become: true
  vars:
    aap_installer_dir: /opt/ansible-automation-platform/installer
  command:
    cmd: >
      ./setup.sh
      -i {{ aap_install_inventory_path }}
      -p {{ aap_install_setup_log_dir | default(aap_installer_dir, true) }}
      --
      --become
      {{ aap_install_script_custom_parameters }}
    chdir: "{{ aap_installer_dir }}"
  changed_when: true
  when: aap_install_installer_run_always | bool or
        installer_package is changed or
        controller_info.status != 200 or
        (aap_install_hub_fqdn and hub_info.status != 200) or
        (aap_install_eda_controller_fqdn and eda_controller_info.status != 200)
